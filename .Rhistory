shiny::runApp()
renv::activate()
renv::hydrate()
renv::snapshot()
BiocManager::install("apeglm")
renv::snapshot()
renv::snapshot()
renv::snapshot()
BiocManager::install("DESeq2")
renv::snapshot()
BiocManager::install("limma")
renv::snapshot()
shiny::runApp()
install.packages("purrr")
y
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/PhD/2024 Second Term/deconvolution/deg/")
# read the raw data
count_data <- read.delim("~/Desktop/PhD/2024 Second Term/deconvolution/for_input/count_matrix_GSE89408.txt",row.names = 1)
# filter rows with Total >= 5*ncol(207) = 1035
count_data$Total <- rowSums(count_data[, 1:ncol(count_data)])
count_data <- count_data[count_data$Total >= 1035, ]
count_data$count_data <- NULL
# read the metadata
metadata <- read.csv("metadata.csv",row.names =1)
# only get the pauci-immune condition
metadata <- metadata[metadata$group == "RA" & metadata$ImmuneCategory == "Pauci-immune",]
# get the count data columns only represented in metadata
count_data <- count_data[,colnames(count_data) %in% rownames(metadata)]
# save them for shiny app
saveRDS(count_data, "count_data_pauci_immune.rds")
saveRDS(metadata, "metadata_pauci_immune.rds")
# create dds using sex as a covariant then get the normalized counts
dds <- DESeqDataSetFromMatrix(countData = count_data, colData = metadata, design = ~ sex)
dds <- estimateSizeFactors(dds)
nrm_counts <- counts(dds, normalized = TRUE)
saveRDS(nrm_counts, "nrm_counts_pauci_immune.rds")
#read rds
count_data <- readRDS("within ra pauci/count_data_pauci_immune.rds")
metadata <- readRDS("within ra pauci/metadata_pauci_immune.rds")
nrm_counts <- readRDS("within ra pauci/nrm_counts_pauci_immune.rds")
#select a gene
selected_gene <- "RBPJ"
# get selected gene expression
selected_gene_expression <-  nrm_counts["RBPJ", ]
# define quantiles
q25 <- quantile(selected_gene_expression, 0.25)
q75 <- quantile(selected_gene_expression, 0.75)
# assign groups
metadata$selected_gene_expression <- ifelse(selected_gene_expression <= q25, "Low",
ifelse(selected_gene_expression >= q75, "High", NA))
# remove other samples
metadata_selected_gene <- metadata[!is.na(metadata$selected_gene_expression),]
metadata_selected_gene$selected_gene_expression <- factor(metadata_selected_gene$selected_gene_expression, c("Low","High"))
count_data_selected_gene <- count_data[,colnames(count_data) %in% rownames(metadata_selected_gene)]
# creating the DESeq2 object
# sex as a batch effect -> this only effects the differential gene expression (logfold changes, padj etc)
# for visualization batch effect remover will be used (only for visualization, not for d.g.e. analysis)
dds <- DESeqDataSetFromMatrix(countData = count_data_selected_gene,
colData =  metadata_selected_gene,
design = ~ sex + selected_gene_expression)
#factor level is set here, this means the base
dds$condition <- relevel(dds$selected_gene_expression, ref = "Low") #if looking at Immunecellproportion, skip
#factor level is set here, this means the base
dds$condition <- relevel(dds$selected_gene_expression, ref = "Low")
#calculating the median of ratios, and adding to our object
#(this is already done in while the deseq2 object, but you can use these values separately)
dds <- estimateSizeFactors(dds)
#extracting the normalized counts from object
new_nrm_counts <- counts(dds, normalized = TRUE)
# Extracting the transformed values (DESEQ2 says blind should be false to reduce noise for downstream analysis)
# DESEQ2 Manual says that bias introduced in blind=FALSE argument is not cruical
vsd <- vst(dds, blind=FALSE)
#computing pairwise correlation values, first create a matrix from vsd object
vsd_mat <- assay(vsd)
#you can also remove the batch effects here for visualization
vsd_copy <- vsd
mat_copy <- assay(vsd_copy)
mm <- model.matrix(~selected_gene_expression, colData(vsd_copy)) #group or ImmuneCellProportion
mat_copy <- removeBatchEffect(mat_copy, batch=vsd_copy$sex, design=mm)
assay(vsd_copy) <- mat_copy
#also for normalized counts
nrm_counts_copy <- new_nrm_counts
nrm_counts_copy <- removeBatchEffect(nrm_counts_copy,batch=vsd_copy$sex, design=mm)
#finally doing the DESeq analysis, dds is now the deseq2 object
dds <- DESeq(dds)
#extracting the results
result <- results(dds, alpha = 0.05)
#Row names are extracted to gene_id column
result$gene_id <- rownames(result)
# getting the coefficients for the log shrinkage
resultsNames(dds)
# log shrinkage, apeglm method will be used (2018 paper)
results_vs <- lfcShrink(dds,
coef="selected_gene_expression_High_vs_Low",type="apeglm")
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
?rownames_to_column
library(tibble)
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
View(metadata_selected_gene)
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
View(count_data)
View(metadata)
View(nrm_counts)
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
runApp('~/Desktop/PhD/2024 Second Term/shiny app after deconvolution')
renv::snapshot()
renv::hydrate()
renv::deactivate()
renv::activate
renv::hydrate()
setwd("~/Desktop/PhD/2024 Second Term/shiny app after deconvolution")
renv::activate()
renv::status()
renv::hydrate()
renv::snapshot()
rsconnect::deployApp("~/Desktop/PhD/2024 Second Term/shiny app after deconvolution",appFileManifest = "manifest.txt")
